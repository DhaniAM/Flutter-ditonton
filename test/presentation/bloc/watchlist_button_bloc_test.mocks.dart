// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/bloc/watchlist_button_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:ditonton/common/failure.dart' as _i9;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i10;
import 'package:ditonton/domain/entities/tv_series_detail.dart' as _i13;
import 'package:ditonton/domain/repositories/movie_repository.dart' as _i2;
import 'package:ditonton/domain/repositories/tv_series_repository.dart' as _i3;
import 'package:ditonton/domain/usecases/get_movie_watchlist_status.dart'
    as _i5;
import 'package:ditonton/domain/usecases/get_tv_series_watchlist_status.dart'
    as _i7;
import 'package:ditonton/domain/usecases/remove_movie_watchlist.dart' as _i11;
import 'package:ditonton/domain/usecases/remove_tv_series_watchlist.dart'
    as _i14;
import 'package:ditonton/domain/usecases/save_movie_watchlist.dart' as _i8;
import 'package:ditonton/domain/usecases/save_tv_series_watchlist.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesRepository_1 extends _i1.SmartFake
    implements _i3.TvSeriesRepository {
  _FakeTvSeriesRepository_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetMovieWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieWatchListStatus extends _i1.Mock
    implements _i5.GetMovieWatchListStatus {
  MockGetMovieWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue:
                  _FakeMovieRepository_0(this, Invocation.getter(#repository)))
          as _i2.MovieRepository);
  @override
  _i6.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: _i6.Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [GetTvSeriesWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvSeriesWatchListStatus extends _i1.Mock
    implements _i7.GetTvSeriesWatchListStatus {
  MockGetTvSeriesWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvSeriesRepository get repository => (super.noSuchMethod(
          Invocation.getter(#repository),
          returnValue:
              _FakeTvSeriesRepository_1(this, Invocation.getter(#repository)))
      as _i3.TvSeriesRepository);
  @override
  _i6.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: _i6.Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [SaveMovieWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveMovieWatchlist extends _i1.Mock
    implements _i8.SaveMovieWatchlist {
  MockSaveMovieWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue:
                  _FakeMovieRepository_0(this, Invocation.getter(#repository)))
          as _i2.MovieRepository);
  @override
  _i6.Future<_i4.Either<_i9.Failure, String>> execute(
          _i10.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: _i6.Future<_i4.Either<_i9.Failure, String>>.value(
                  _FakeEither_2<_i9.Failure, String>(
                      this, Invocation.method(#execute, [movie]))))
          as _i6.Future<_i4.Either<_i9.Failure, String>>);
}

/// A class which mocks [RemoveMovieWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveMovieWatchlist extends _i1.Mock
    implements _i11.RemoveMovieWatchlist {
  MockRemoveMovieWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue:
                  _FakeMovieRepository_0(this, Invocation.getter(#repository)))
          as _i2.MovieRepository);
  @override
  _i6.Future<_i4.Either<_i9.Failure, String>> execute(
          _i10.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: _i6.Future<_i4.Either<_i9.Failure, String>>.value(
                  _FakeEither_2<_i9.Failure, String>(
                      this, Invocation.method(#execute, [movie]))))
          as _i6.Future<_i4.Either<_i9.Failure, String>>);
}

/// A class which mocks [SaveTvSeriesWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTvSeriesWatchlist extends _i1.Mock
    implements _i12.SaveTvSeriesWatchlist {
  MockSaveTvSeriesWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvSeriesRepository get repository => (super.noSuchMethod(
          Invocation.getter(#repository),
          returnValue:
              _FakeTvSeriesRepository_1(this, Invocation.getter(#repository)))
      as _i3.TvSeriesRepository);
  @override
  _i6.Future<_i4.Either<_i9.Failure, String>> execute(
          _i13.TvSeriesDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvSeries]),
              returnValue: _i6.Future<_i4.Either<_i9.Failure, String>>.value(
                  _FakeEither_2<_i9.Failure, String>(
                      this, Invocation.method(#execute, [tvSeries]))))
          as _i6.Future<_i4.Either<_i9.Failure, String>>);
}

/// A class which mocks [RemoveTvSeriesWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveTvSeriesWatchlist extends _i1.Mock
    implements _i14.RemoveTvSeriesWatchlist {
  MockRemoveTvSeriesWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvSeriesRepository get repository => (super.noSuchMethod(
          Invocation.getter(#repository),
          returnValue:
              _FakeTvSeriesRepository_1(this, Invocation.getter(#repository)))
      as _i3.TvSeriesRepository);
  @override
  _i6.Future<_i4.Either<_i9.Failure, String>> execute(
          _i13.TvSeriesDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvSeries]),
              returnValue: _i6.Future<_i4.Either<_i9.Failure, String>>.value(
                  _FakeEither_2<_i9.Failure, String>(
                      this, Invocation.method(#execute, [tvSeries]))))
          as _i6.Future<_i4.Either<_i9.Failure, String>>);
}
